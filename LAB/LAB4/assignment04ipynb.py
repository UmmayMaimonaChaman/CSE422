# -*- coding: utf-8 -*-
"""22301719_UmmayMaimonaChaman_12_CSE422_Assignment04ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y90jj5CP5wPgvVYZ99W_REvjoEaaz4aJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score, roc_curve, accuracy_score

"""# **Data Preprocessing**"""

!pip install gdown
import gdown

# dataset
file_id = "1dpbXDZ0UreOc-0jJMWtmA8oykR1I-Opn"
gdown.download(f"https://drive.google.com/uc?id={file_id}", "heart_disease.csv", quiet=False)
df = pd.read_csv("heart_disease.csv")
print(df.head())

# Renaming target column
df.rename(columns={'Heart Disease (in next 10 years)': 'target'}, inplace=True)

for col in df.columns:
    if df[col].dtype == 'object':
        df[col].fillna(df[col].mode()[0], inplace=True)
    else:
        df[col].fillna(df[col].mean(), inplace=True)

df = pd.get_dummies(df, drop_first=True)


X = df.drop('target', axis=1)
y = df['target']


scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

"""# **Model Training**"""

# Initializing the Random Forest Classifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

"""# **Model Prediction**"""

y_pred = model.predict(X_test)
y_pred_proba = model.predict_proba(X_test)[:, 1]

"""# **Model Evaluation**"""

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Classification Report
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Accuracy Score
acc = accuracy_score(y_test, y_pred)
print(f"Accuracy Score: {acc:.4f}")

# ROC Curve and AUC Score
y_probs = model.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_probs)

plt.plot(fpr, tpr, label='ROC Curve')
plt.plot([0,1], [0,1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

auc_score = roc_auc_score(y_test, y_probs)
print(f"AUC Score: {auc_score:.4f}")