# -*- coding: utf-8 -*-
"""22301719_Ummay Maimona Chaman.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HHZbw-OCEvqM_fGccuKHCG75Rvz5D1n5

# **ASSIGNMENT 01**
"""

input_file = open("input_l1.txt", "r")

import heapq
def loadingdata(file):
    heuristic = {}
    graph = {}

    for line in file:
        temp = line.split()
        city = temp[0]
        heuristic[city] = int(temp[1])
        graph[city] = []
        for i in range(2, len(temp) - 1, 2):
            neighbor = temp[i]
            distance = int(temp[i + 1])
            graph[city].append((neighbor, distance))

    return heuristic, graph

def print_path(parent, start, end, distance):
    path = []
    temp = end

    while temp is not None:
        path.append(temp)
        temp = parent.get(temp)

    path.reverse()

    with open("Output_file.txt", 'w') as f:
        if len(path) == 1:
            f.write("NO PATH FOUND\n")
        else:
            f.write("Path: ")
            for i in range(len(path)):
                if i == len(path) - 1:
                    f.write(path[i] + "\n")
                else:
                    f.write(path[i] + " -> ")

            f.write("Total distance: " + str(distance[end]) + " km\n")

def a_star_search(start, end, heuristic, graph):
    parent = {start: None}
    distance = {start: 0}
    priority_queue = [(heuristic[start], start)]  # (f(n), city)
    while priority_queue:
        _, current = heapq.heappop(priority_queue)
        if current == end:
            break

        for neighbor, cost in graph.get(current, []):
            new_distance = distance[current] + cost
            if neighbor not in distance or new_distance < distance[neighbor]:
                distance[neighbor] = new_distance
                heapq.heappush(priority_queue, (new_distance + heuristic.get(neighbor, 0), neighbor))
                parent[neighbor] = current

    print_path(parent, start, end, distance)

heuristic, graph = loadingdata(input_file)
starting = input("Start: ")
ending = input("End: ")
a_star_search(starting, ending, heuristic, graph)

