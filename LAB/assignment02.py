# -*- coding: utf-8 -*-
"""22301719_UmmayMaimonaChaman_12_CSE422_Assignment02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JGzQi7lG4RtGp-gBovYnESoydTd1cIfT
"""

import random
initialCAPITAL = 1000
historicalPrices = [-1.2, 3.4, -0.8, 2.1, -2.5, 1.7, -0.3, 5.8, -1.1, 3.5]

class TradingGA:
    def __init__(self, initialpopulation, generations=10):
        self.population = initialpopulation
        self.generations = generations
        self.best_chromosome = None
        self.best_fitness = -float('inf')

    def chromosome_to_string(self, chromosome):
        sl = str(int(chromosome["stop_loss"] * 10)).zfill(2)
        tp = str(int(chromosome["take_profit"] * 10)).zfill(2)
        ts = str(int(chromosome["trade_size"])).zfill(2)
        return sl + tp + ts

    def string_to_chromosome(self, chromosome_str):
        sl = int(chromosome_str[0:2]) / 10
        tp = int(chromosome_str[2:4]) / 10
        ts = int(chromosome_str[4:6])
        return {"stop_loss": sl, "take_profit": tp, "trade_size": ts}

    def calculate_fitness(self, chromosome):
        stop_loss = chromosome["stop_loss"]
        take_profit = chromosome["take_profit"]
        trade_size_percent = chromosome["trade_size"]

        capital = initialCAPITAL

        for price_change in historicalPrices:
            trade_size = capital * (trade_size_percent / 100)
            if price_change <= -stop_loss:  # Stop-loss hit
                profit_loss = -trade_size * (stop_loss / 100)
            elif price_change >= take_profit:  # Take-profit hit
                profit_loss = trade_size * (take_profit / 100)
            else:  # Normal trade
                profit_loss = trade_size * (price_change / 100)

            capital += profit_loss

        fitness = capital - initialCAPITAL
        return fitness

    def select_parents(self):
        return random.sample(self.population, 2)

    def crossover(self, parent1, parent2):
        parent1_str = self.chromosome_to_string(parent1)
        parent2_str = self.chromosome_to_string(parent2)

        crossover_point = random.randint(1, len(parent1_str) - 1)

        offspring1_str = parent1_str[:crossover_point] + parent2_str[crossover_point:]
        offspring2_str = parent2_str[:crossover_point] + parent1_str[crossover_point:]

        offspring1 = self.string_to_chromosome(offspring1_str)
        offspring2 = self.string_to_chromosome(offspring2_str)

        return offspring1, offspring2

    def mutate(self, chromosome, mutation_rate=0.05):
        if random.random() < mutation_rate:
            param = random.choice(["stop_loss", "take_profit", "trade_size"])

            if param == "stop_loss":
                chromosome["stop_loss"] = round(random.uniform(1, 10), 1)
            elif param == "take_profit":
                chromosome["take_profit"] = round(random.uniform(1, 10), 1)
            else:  # trade_size
                chromosome["trade_size"] = random.randint(1, 50)

        return chromosome

    def run(self):
        print("Initial Population:")
        for idx, chrom in enumerate(self.population):
            fitness = self.calculate_fitness(chrom)
            print(f"Chromosome {idx+1}: {chrom} - Fitness: {fitness:.2f}")

            # Update best chromosome if this one is better
            if fitness > self.best_fitness:
                self.best_fitness = fitness
                self.best_chromosome = chrom.copy()

        print("\nEvolution Process:")
        for gen in range(self.generations):
            new_people = []

            #elitism
            new_people.append(self.best_chromosome)

            while len(new_people) < len(self.population):
                parent1, parent2 = self.select_parents()

                # Crossover
                offspring1, offspring2 = self.crossover(parent1, parent2)

                # Mutate
                offspring1 = self.mutate(offspring1)
                offspring2 = self.mutate(offspring2)

                # Add to new population
                new_people.append(offspring1)
                if len(new_people) < len(self.population):
                    new_people.append(offspring2)

            # Update population
            self.population = new_people

            # Evaluate fitness and find the best chromosome
            for chrom in self.population:
                fitness = self.calculate_fitness(chrom)

                # Update best chromosome
                if fitness > self.best_fitness:
                    self.best_fitness = fitness
                    self.best_chromosome = chrom.copy()

            print(f"Generation {gen+1}: Best Fitness = {self.best_fitness:.2f}, Best Strategy = {self.best_chromosome}")

        print("\nFinal Result:")
        print(f"Best Strategy: {self.best_chromosome}")
        print(f"Final Profit: ${self.best_fitness:.2f}")

        return self.best_chromosome, self.best_fitness


# Part 2: Two-point crossover implementation
def two_point_crossover(parent1, parent2):
    def chromosome_to_string(chromosome):
        sl = str(int(chromosome["stop_loss"] * 10)).zfill(2)
        tp = str(int(chromosome["take_profit"] * 10)).zfill(2)
        ts = str(int(chromosome["trade_size"])).zfill(2)
        return sl + tp + ts

    def string_to_chromosome(chromosome_str):
        sl = int(chromosome_str[0:2]) / 10
        tp = int(chromosome_str[2:4]) / 10
        ts = int(chromosome_str[4:6])
        return {"stop_loss": sl, "take_profit": tp, "trade_size": ts}

    parent1_str = chromosome_to_string(parent1)
    parent2_str = chromosome_to_string(parent2)


    str_length = len(parent1_str)
    point1 = random.randint(1, str_length - 2)
    point2 = random.randint(point1 + 1, str_length - 1)


    offspring1_str = parent1_str[:point1] + parent2_str[point1:point2] + parent1_str[point2:]
    offspring2_str = parent2_str[:point1] + parent1_str[point1:point2] + parent2_str[point2:]

    offspring1 = string_to_chromosome(offspring1_str)
    offspring2 = string_to_chromosome(offspring2_str)

    return offspring1, offspring2, point1, point2


if __name__ == "__main__":
    # Part 1: Main GA implementation
    initialpopulation = [
        {"stop_loss": 2.0, "take_profit": 5.0, "trade_size": 20},
        {"stop_loss": 3.0, "take_profit": 7.0, "trade_size": 30},
        {"stop_loss": 1.5, "take_profit": 4.0, "trade_size": 25},
        {"stop_loss": 2.5, "take_profit": 6.0, "trade_size": 15}
    ]

    print("...................PART 1: GENETIC ALGORITHM FOR TRADING................")
    ga = TradingGA(initialpopulation, generations=10)
    best_strategy, final_profit = ga.run()

    # Part 2: Two-point crossover demonstration
    print("\n\n................PART 2: TWO-POINT CROSSOVER DEMONSTRATION........................")
    selected_parents = random.sample(initialpopulation, 2)
    parent1, parent2 = selected_parents

    print(f"Parent 1: {parent1}")
    print(f"Parent 2: {parent2}")

    # Perform two-point crossover
    child1, child2, point1, point2 = two_point_crossover(parent1, parent2)

    print(f"\nCrossover Points: {point1} and {point2}")
    print(f"Child 1: {child1}")
    print(f"Child 2: {child2}")