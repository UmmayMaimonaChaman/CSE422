# -*- coding: utf-8 -*-
"""22301719_UmmayMaimonaChaman.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19FbLCXnQMiMWgdFaRQrD4O16dN5RttD8

# **TASK 1**
"""

import random
import math

def strength(x):
    return math.log2(x + 1) + (x / 10)

def calc_utility(maxValue, minValue):
    i = random.randint(0, 1)
    random_value = random.randint(1, 10)
    utility = strength(maxValue) - strength(minValue) + (-1) ** i * random_value
    return utility

def minimax(depth, maxValue, minValue, maxPlayer, alpha, beta):
    if depth == 0:
        return calc_utility(maxValue, minValue)

    if maxPlayer:
        max_eval = float('-inf')
        for _ in range(2):
            eval = minimax(depth - 1, maxValue, minValue, False, alpha, beta)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for _ in range(2):
            eval = minimax(depth - 1, maxValue, minValue, True, alpha, beta)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

def play_game(start_player, maxValue, minValue):

    maxPlayer = (start_player == 0)
    utilityValue = minimax(5, maxValue, minValue, maxPlayer, float('-inf'), float('inf'))

    if utilityValue > 0:
        winner = "Magnus Carlsen" if start_player == 0 else "Fabiano Caruana"
    elif utilityValue < 0:
        winner = "Fabiano Caruana" if start_player == 0 else "Magnus Carlsen"
    else:
        winner = "Draw"

    return winner, utilityValue

def main():
    start_player = int(input("Enter starting player for game 1 (0 for Carlsen, 1 for Caruana): "))
    maxValue_carlsen = float(input("Enter base strength for Carlsen: "))
    minValue_caruana = float(input("Enter base strength for Caruana: "))

    carlsen_wins = 0
    caruana_wins = 0
    draws = 0

    results = []

    for game in range(1, 5):
        if game % 2 == 1:
            winner, utility = play_game(start_player, maxValue_carlsen, minValue_caruana)
        else:
            winner, utility = play_game(1 - start_player, minValue_caruana, maxValue_carlsen)

        results.append((winner, utility))

        if winner == "Magnus Carlsen":
            carlsen_wins += 1
        elif winner == "Fabiano Caruana":
            caruana_wins += 1
        else:
            draws += 1

        print(f"Game {game} Winner: {winner} (Utility value: {utility:.2f})")

    print("Overall Results:")
    print(f"Magnus Carlsen Wins: {carlsen_wins}")
    print(f"Fabiano Caruana Wins: {caruana_wins}")
    print(f"Draws: {draws}")
    if carlsen_wins > caruana_wins:
        print("Overall Winner: Magnus Carlsen")
    elif caruana_wins > carlsen_wins:
        print("Overall Winner: Fabiano Caruana")
    else:
        print("Overall Winner: Draw")

if __name__ == "__main__":
    main()

"""# **TASK 2**"""

def minimax_withoutMagic(strength_light, strength_L):
    return strength_light - strength_L

def minimax_withMagic(strength_light, strength_L, who_goes_first):
    if who_goes_first == 0:
        return (strength_light + 0.3) - strength_L
    else:
        return strength_light - (strength_L + 0.3)

def main():

    who_goes_first = int(input("Enter who goes first (0 for Light, 1 for L): "))
    cost_of_mind_control = float(input("Enter the cost of using Mind Control: "))
    strength_light = float(input("Enter base strength for Light: "))
    strength_L = float(input("Enter base strength for L: "))


    minimax_noMagic = minimax_withoutMagic(strength_light, strength_L)
    minmax_WithMagic = minimax_withMagic(strength_light, strength_L, who_goes_first)
    minmax_WithMagic_after_cost = minmax_WithMagic - cost_of_mind_control


    print(f"Minimax value without Mind Control: {minimax_noMagic:.2f}")
    print(f"Minimax value with Mind Control: {minmax_WithMagic:.2f}")
    print(f"Minimax value with Mind Control after incurring the cost: {minmax_WithMagic_after_cost:.2f}")


    if minimax_noMagic > minmax_WithMagic_after_cost:
        print("Light should NOT use Mind Control as the position is already winning.")
    elif minmax_WithMagic_after_cost > minimax_noMagic:
        print("Light should use Mind Control.")
    else:
        print("Light should NOT use Mind Control as it backfires.")

if __name__ == "__main__":
    main()